(macro fun (require "eslisp-fancy-function"))
; - - -

(function gen-color ()
  (return (normalize-color (object
    r (Math.random)
    g (Math.random)
    b (Math.random)))))
;
(function normalize-color (color)
  (var abs (Math.sqrt (+ (Math.pow color.r 2)
                         (Math.pow color.g 2)
                         (Math.pow color.b 2))))
  (return (object
    r (/ color.r abs)
    g (/ color.g abs)
    b (/ color.b abs))))
;
(function get-winner (input map)
  (var max -1)
  (var winner null)
  (for (var i 0) (< i map.length) (++ i)
    (var col (get map i))
    (for (var j 0) (< j col.length) (++ j)
      (var color (get col j))
      (var score (+ (* input.r color.r)
                    (* input.g color.g)
                    (* input.b color.b)))
      (if (< max score) (block
        (= max score)
        (= winner (object i i j j color color))))))
  (return winner))
;
(function learn (input winner map)
    (for (var i  0) (< i map.length) (++ i)
      (var col (get map i))
      (for (var j 0) (< j col.length) (++ j)
        (var x (Math.exp (- (+
          (Math.abs (- winner.i i))
          (/ (Math.abs (- winner.j j)) 2)))))
        (+= (. (get col j) r) (* input.r x))
        (+= (. (get col j) g) (* input.g x))
        (+= (. (get col j) b) (* input.b x))
        (=  (. (get col j)) (normalize-color (get col j))))))
;
(function repaint (canvas map)
  (var cxt (canvas.get-context "2d"))
  (var dat (cxt.get-imageData 0 0 canvas.width canvas.height))
  (for (var i  0) (< i map.length) (++ i)
    (var col (get map i))
    (for (var j 0) (< j col.length) (++ j)
      (var index (* (+ i (* j canvas.width)) 4))
      (var color (get col j))
      (= (get dat.data index)     (* color.r 255))
      (= (get dat.data (+ index 1)) (* color.g 255))
      (= (get dat.data (+ index 2)) (* color.b 255))
      (= (get dat.data (+ index 3)) 255)))
  (cxt.put-image-data dat 0 0))
;
(window.add-eventListener "load" (lambda ()
  (var canvas (document.getElementById "target"))
  (var map (array))
  (for (var i  0) (< i canvas.width) (++ i)
    (var col (array))
    (map.push col)
    (for (var j  0) (< j canvas.height) (++ j)
      (col.push (genColor))))
  (set-interval (lambda ()
    (var input (gen-color))
    (var winner (get-winner input map))
    (if (! winner) (return null))
    (learn input winner map)
    (repaint canvas map)
  ) 0)))
